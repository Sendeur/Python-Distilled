In REPL (read-eval-print loop) _ holds the result of the last operation.

Python source files are UTF-8 encoded text files.

Can have types associated to variables
    x: int = 10
however, they are ignored (can be checked by 3rd party tooling)...
    x: str = 10

A value is considered False if it is "False", None, numerically zero or empty. Otherwise, it's considered True.

Walrus operator (:=) can be used to assign to a variable. The result of the expression is the result of the RHS assignment.
    (x := 5 + 1) > 5    # True

Strings are stored as Unicode text.

Python's default arguments are evaluated once when the function is defined, not each time the function is called (like it is in say, Ruby).
This means that if you use a mutable default argument and mutate it, you will and have mutated that object for all future calls to the function as well.

__name__ contains the name of the enclosing module (see basic_module.py):
    * __main__, if script called in a top-level environment 
    * <script>, if script is imported via "import <script>"

CPython performs String Interning on constants such as Function Names, Variable Names, String Literals, etc.
Following is the snippet from codeobject.c that suggests that when a new PyCode object is created the interpreter is interning all the compile-time constants,
names, and literals.
CPython also interns thee Strings which keys of any dictionary object. Upon putting an item in the dictionary the interpreter String Interning on the key against which item is stored.
CPython interns all these attribute names, so as to make lookup blazing fast.
Only compile-time strings are interned.
Only strings containing letters, numbers and underscores are interned. "hello world" is NOT interned.
    x = "hello world"
    y = "hello world"
    x is y  # False

Use sys.intern() to intern these:
    x = sys.intern("hello world")
    y = sys.intern("hello world")
    x is y  # True

When importing module, search:
1) in current directory
2) in PYTHONPATH
3) in site-packages

Sequences can be:
- immutable -> string, tuple
- mutable

Mutable sequences support index/slice assignment
    seq[1] = 10
    seq[1:3] = [ 1, 2, 3, 4, 5 ] # with extension
